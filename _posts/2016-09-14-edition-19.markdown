---
title: Git Rev News Edition 19 (September 14th, 2016)
layout: default
date: 2016-09-14 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 19 (September 14th, 2016)

Welcome to the 19th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the month of August 2016.

## Discussions

### General

* [git-series presentation at the LinuxCon North America](https://www.youtube.com/watch?v=68XsuXlWiWU&index=23&list=PLGeM09tlguZQyemL0Y5CdpEFrBs-hGGM8)

There were a significant number of Git related presentations at the
[LinuxCon North America 2016 in Toronto](http://events.linuxfoundation.org/events/linuxcon-north-america)
from August 22 to August 24, and they happened to be recorded:

  - [Who Authored the Kernel? Recovering Token-Level Authorship Information from Git by Daniel German](https://www.youtube.com/watch?v=iXZV5uAYMJI&index=4&list=PLGeM09tlguZQyemL0Y5CdpEFrBs-hGGM8), see also the [LWN article](http://lwn.net/Articles/698425/).
  - [Versions All the Way Down: Versioning Commits and Patches with Git-Series by Josh Triplett, Intel](https://www.youtube.com/watch?v=68XsuXlWiWU&index=23&list=PLGeM09tlguZQyemL0Y5CdpEFrBs-hGGM8).
  - [Tracking Huge Files with Git LFS by Tim Pettersen, Atlassian](https://www.youtube.com/watch?v=yuKAV5cCcTw&list=PLGeM09tlguZQyemL0Y5CdpEFrBs-hGGM8&index=24).
  - [Terrible Ideas in Git by Corey Quinn, FutureAdvisor](https://www.youtube.com/watch?v=Wr7ulql0Exo&index=25&list=PLGeM09tlguZQyemL0Y5CdpEFrBs-hGGM8).
  - [Git and Testing by your own Christian Couder](https://www.youtube.com/watch?v=TcgyVWBg8EQ&list=PLGeM09tlguZQyemL0Y5CdpEFrBs-hGGM8&index=26).

One of the most attended was Josh's presentation
([slides](http://events.linuxfoundation.org/sites/events/files/slides/git-series.pdf),
[video](https://www.youtube.com/watch?v=68XsuXlWiWU&index=23&list=PLGeM09tlguZQyemL0Y5CdpEFrBs-hGGM8))
about git-series. Josh had already
[announced git-series on the mailing list](https://public-inbox.org/git/20160729064055.GB25331@x/)
which had generated some amount of discussion about how the different
efforts to store more data and meta-data related to patch series using
git itself could collaborate.

In his talk Josh started by explaining the problems with the current
way of handling a patch series.

One problem is that when you get feedback, you have to rework your
patch series, so you create another version of your patch series. But
then what happens to the previous version of the series?

You have to keep it, because people can tell you that they liked
better what your previous version did, and because some people are
actually interested in the real history of your code.

You could use the reflog to keep it, but it is ephemeral by default
and it is not easy to push or pull. You could also dig an email from
your sent-mail folder or a mailing list archive.

So a fundamental problem is that Git tracks only curated history
but we need more than that, we need the history of history.

`git submodule` could be used to track that but people generally have
a bad experience with `git submodule`. It's also possible to manage
patches outside Git. There are tools like for example quilt that can
be used for this purpose, but then you lose the power of working with
Git.

Another possibility is to use branches with version names like
feature-v1, feature-v2 and so on. But soon you could have names like
feature-v8-rebased-on-3-4-alice-fix and then "everybody who worked in
a corporate environment would feel right at home".

Such solutions anyway don't solve the problem of managing the cover
letter and the base commit which is the commit you started your patch
series from.

They also don't solve the problem of collaboration. One rule of
collaboration is to never rewrite published history, but then how do
you collaborate on history that needs rewriting?

Emailing patches back and forth is not a good solution for some kinds
of work like back-porting a feature, preparing a distribution package,
rebasing stacks of patches sitting on top of upstream code.

'git-series' has been developed to fix all those problems. It tracks
the history of a patch series, and also tracks its cover letter and its
base.

Then Josh gave a demo.

To create a series called "feature" based on v4.7, you would run for
example:

```
git series start feature
-> HEAD is now detached at fa8410b Linux 4.8-rc3
git checkout v4.7
-> HEAD is now at 523d939... Linux 4.7
git series base v4.7
-> Set patch series base to 523d939 Linux 4.7
vim README
git commit -a -m 'Change A'
vim README
git commit -a -m 'Change B'
git series status
-> On series feature
->
-> Initial series commit
-> Changes not staged for commit:
->   (use "git series add <file>..." to update what will be committed)
->
->         Added:         base
->         Added:         base
->
-> no changes added to commit (use "git series add" or "git series commit -a")
git series add series
git series add base
git series commit
-> [feature 5eca363] Initial version of feature
git series cover
-> Updated cover letter
git series commit -a -m "Add cover letter"
```

The following commands were also part of Josh's demo:

  - `git series log`
  - `git series rebase -i`
  - `git series rebase v4.8-rc3`
  - `git series format`                                   # to format patches like `git format-patch`
  - `git series req ~/remote-location/linux feature`      # to send a pull request like `git request-pull`
  - `git series checkout another-feature`                 # to work on another patch series

Then Josh went back to the presentation to talk about how git-series
works.

The internals are described in INTERNALS.md in the git-series repo.

After reviewing the Git objects (blobs, trees, commits, tags) and
refs, Josh noticed that trees can refer to commits and such an entry
in a tree is called a "gitlink". Gitlinks are already used by git
submodule. git-series uses them to track the series and the base.

One of the requirements for git-series was that every object
referenced by git-series has to be reachable by Git, otherwise it
might get deleted, and you want to be able to push and pull the
objects, but you can do this only if they are reachable.

The way git-series is implemented is that a series is like a branch
prefixed with 'git-series', for example:

  refs/heads/git-series/feature

This branch points to a commit for example called series-v2, that
itself has commit series-v1 as its first parent.

The tree pointed to by these commit has the following entries:

  - series:  a gitlink pointing to the top commit of the series
  - base:    a gitlink pointing to the base commit of the series
  - cover:   a blob containing the cover letter

The problem with this is that Git by default doesn't follow gitlinks
for reachability or push/pulls.

To fix that, an extra parent commit is added to the series-v1 and
series-v2 commits for reachability. git-series ignore that parent when
traversing the commits.

Josh then gave more "minor details" about how it works.

Your current branch is referred by HEAD and the current series is
referred by refs/SHEAD, in which 'refs/' is needed for reachability.

The working and staged states are respectively in:

  - refs/git-series-internals/working/feature
  - refs/git-series-internals/staged/feature

which both points to temporary commits. This is needed for
reachability of a not yet committed cover letter.

Then Josh talked about his experience designing and developing
git-series.

He found on multiple occasions that avoiding to need big errors
messages was a good strategy. Often a long and complex error messages
suggested he might have a design flaw, so he redesigned to make the
error impossible.

One example of that is what happens when we detach from a series or
check out a new series with uncommitted changes. First he had designed
git-series to use only one staged and working version for a
repository, so in this case he would have needed an error message to
explain that you could lose some data and perhaps something like
`git series checkout --force` to checkout anyway.

Then he realized that if each series had its own working and staged
version there would be no need for such an error message and for a
force option.

Another example is what happens when you have created a new series and
made some change to it, but have not yet committed anything, and you
want to detach from it or checkout a new series.

Git has the notion of an "unborn branch", as, when you create a repo,
the "master" is created and HEAD points to it, but "master" doesn't
point to anything. This means many special cases.

Instead of having to write error messages when we detach from a series
or when we checkout another one, as soon as you start a series the
working and staged versions are created and a message says: "new no
commit yet". So unlike git you can create new series with nothing on
them yet.

Josh then explained that `git series rebase` was interesting to
implement because libgit2, which was used to implement git-series, has
no support for rebase.

Git saves state when it fails in the middle of a rebase and you have
to use `git rebase --continue` to continue when the problem has been
fixed.

So a temporary measure Josh used, while working on implementing rebase
in libgit2, is to write out all the necessary state that Git would
save if it failed, and then exec `git rebase --continue`. This way Git
resumes a rebase that it never started.

The last things Josh talked about are the tools he used to build
git-series. Josh used Rust and libgit2 with its Rust bindings. He
highly recommends libgit2 and Rust. He said libgit2 was essential and
is really effective to play with a repository.

git-series has been the project he used to learn how to use Rust. As
it is still a very young language, he had to submit patches to the
libgit2 Rust bindings and to a few other Rust libraries to make them
do what he needed. But it was really fun experience especially because
he didn't have to deal with memory management.

Next year the "LinuxCon" will be renamed "Open Source Summit" and in
North America it will happen in Los Angeles, September 11-13. Perhaps
the name change hints that it could become an even more relevant place
for Git related presentations.

* [Google Summer of Code 2016](https://summerofcode.withgoogle.com/) Wrap Up

There was only one student, [Pranit Bauva](https://github.com/pranitbauva1997/),
mentored by Lars Schneider and Christian Couder, who participated this
year in the Google Summer of Code. Matthieu Moy and Jeff King were the
GSoC administrators for the Git project.

Pranit has been working on an "Incremental rewrite of git-bisect"
which goal was to port parts of the `git bisect` command from shell to
C code.

Pranit wrote
[a report about his work](https://docs.google.com/document/d/1Uir0a8cRYlWANuzoU4iTDtEvPukvtTJcC_dB3KJUgqM/edit#heading=h.mipx2w79za4f)
and uploaded
[the last version of the patches he wrote before the end of the GSoC](https://drive.google.com/drive/folders/0B2SBIDYEkAaiV2xhNWZNSUdWOVE).

Pranit passed the GSoC final evaluation.

* **[Git User's Survey 2016](https://survs.com/survey/3cop1kt5eg)** is open till **20 October 2016** (*written by Jakub Narębski*)

This year we will see the return of Git User's Survey (the last one was
in 2012).  The goal of the survey is mainly to help to understand who is
using Git, how and why.

The results will be published to the Git wiki on the
[GitSurvey2016](https://git.wiki.kernel.org/index.php/GitSurvey2016)
page and discussed on the git mailing list.

The survey would be open from **12 September** to **20 October 2016**.

Beside getting information on how people use Git, what are their pain
points, and what they want from Git (which might be different from what
Git developers think it is), the [survey has also educational purpose,
and includes a bit of advertisement](https://public-inbox.org/git/577E6F32.7020007%40gmail.com/)
(brief note about this
was in [#17](https://git.github.io/rev_news/2016/07/20/edition-17/)).
For example question about tools used or one about features used teaches
what is available (and which might had been not known).

The questions were prepared with the help of Eric Wong and Andrew Adrill;
the [[RFC] Proposed questions for "Git User's Survey 2016"](http://public-inbox.org/git/91a2ffbe-a73b-fbb9-96da-9aea4d439e5a@gmail.com/t/)
thread and its sub-threads was posted to solicit feedback.

The survey was announced first on Git mailing list in
[[ANNOUNCE] Git User's Survey 2016](http://public-inbox.org/git/de39c03d-e84e-8e45-69cb-a2e01fd25df2@gmail.com/) thread.
At request to survey administrator, Jakub Narębski, (as response to the
announcement email), one can get a separate channel in survey, with
a separate survey URL, so that responses from a particular site
or an organization could be split out.  Some companies already
got their customized survey URLs.

It should be noted that the result of the survey need to be taken with
a bit of caution.  As Johannes Schindelin [reminded us](http://public-inbox.org/git/alpine.DEB.2.20.1609091503410.129229@virtualbox/),
many professional developers that use Git would be too busy to take the
survey.  Though hopefully the fact that you can fill it bit by bit
(from the same computer), instead of having to fill it whole at once,
would help.  Taking 30 minutes or more at once may be a problem,
taking 10 times a 3 minutes at once may not be...

There is also alternate version of the survey (alternate channel),
which does not require cookies or JavaScript, and is fully anonymous,
but it doesn't allow one to go back to response and edit it:
https://tinyurl.com/GitSurvey2016-anon

***A bit of history:*** First "GIT user survey" was [announced](http://public-inbox.org/git/4d8e3fd30606240918m6b452314m6514b5e5fc86f147@mail.gmail.com/)
and created in 2006; its results can be found at [GitSurvey2006](https://git.wiki.kernel.org/index.php/GitSurvey2006)
page on Git Wiki.  So this year's survey is 10th anniversary
of the first one.  Since 2008 the Git User's Survey was hosted on
[Survs.com](https://survs.com) (then beta), thanks to generosity
of the site, who provides with recurring premium annual plan.

* Thank you Nicola and call for help!

From the beginning in March 2015, Nicola Paolucci helped set up the
infrastructure for Git Rev News, especially MailChimp to send Git Rev
News as an email to people who subscribed to receive it this way, and
a number of miscellaneous improvements.

Unfortunately, as he has been lacking bandwidth to work on Git Rev
News recently, he asked to be de-installed from being an editor. So we
are now only two, while there is more and more to do to have a
relevant, vibrant and entertaining news letter for the Git Community.

That's why we are thanking Nicola for his help, and looking for other
people to join our small Git Rev News editor team.

There is no need to even know Git well for that. It's possible to
participate by just proofreading articles for example. Please contact
us (see our emails [at the bottom](#credits)) if you are interested.

### Reviews

* [Use header data patch ids for rebase to avoid loading file content](http://public-inbox.org/git/20160729161920.3792-1-kcwillford@gmail.com/)

One of the improvements in the just released Git v2.10 is an
optimization of the patch id mechanism implemented by Kevin Willford
helped by Johannes Schindelin, alias Dscho, as Kevin and Dscho are
colleagues working for Microsoft.

The patch id mechanism is used for example by `git rebase` to avoid
trying to rebase commits that have been already integrated. This is
done by computing a finger print of each commit called "patch id" and
comparing the patch ids of the commits on the two sides of the rebase.

Kevin started by sending
[a patch called "Use path comparison for patch ids before the file content"](https://public-inbox.org/git/20160714201758.13180-1-kcwillford@gmail.com/).

The idea behind his patch is that, to compare commits, it should be
simpler to first look which files are changed by the commits, before
looking at their content. If the files changed by two commits are
different, there is no need to look at what is changed exactly to tell
that the commits are different.

So instead of computing a patch id made from the content of a commit,
it is more efficient to compute a patch id based on the files that are
changed and only if necessary compute another patch id based on the
content that is changed. This makes `git rebase` 1% to 6% faster.

Junio Hamano agreed that it was a good idea and suggested some
improvements. Dscho also commented and suggested other improvements
including to split the patch.

A few weeks later Kevin sent
[a version 2](http://public-inbox.org/git/20160729161920.3792-1-kcwillford@gmail.com/)
in the form of a 4 patch series.

There were some discussions around a few related issues but in the end
the patch series got merged.

<!---
### Support
-->

## Developer Spotlight: Brian M. Carlson

* Who are you and what do you do?

I'm a software developer living in Houston, Texas, US.  I've long been
involved in the FLOSS community, mostly with one-off patches,
documentation improvements, and other maintenance-related work.  I'm a
polyglot programmer, and I contribute to Asciidoctor, among other
projects.  I also enjoy biking and writing in my spare time.

Professionally, I'm a developer with cPanel.  There I do maintenance
work on our product and development tools, manage alternating releases,
advise on security design, and of course maintain the copy of Git we use
internally and ship to customers.  I also perform some training for
developers, QA, and documentation folk on how to use Git and how to use
it more effectively.

* What would you name your most important contribution to Git?

One of the things I've really enjoyed doing is making Git work better
over HTTP with Kerberos.  I use Kerberos for my internal network
infrastructure at home, and Git has gone from not working at all to
being very robust and reliable using Kerberos authentication.  There are
still some usability issues we can improve on, though.

* What are you doing on the Git project these days, and why?

Most of my time is spent on converting the code to use a structure for
object identifiers (hashes) instead of one-off arrays everywhere.  This
improves the quality and maintainability of the code, and it also makes
it easier to switch to a different hash than SHA-1.  Depending on the
hash that's chosen, we could also potentially improve the performance of
Git as a result of that work as well.

* If you could get a team of expert developers to work full time on
  something in Git for a full year, what would it be?

One thing I know is a pain point for a lot of people is very large
repositories, whether that's in terms of number or size of files, total
repository size, or number of references.  I've personally had to
troubleshoot some of those problems, and I'd love to get some additional
improvements in that area to make Git perform better and use less space.

* If you could remove something from Git without worrying about
  backwards compatibility, what would it be?

I think I'd remove the dumb HTTP and FTP support.  It tends to perform
really badly, requires per-repository server-side configuration to get
right, and complicates the smart HTTP protocol code.

* What is your favorite Git-related tool/library, outside of Git itself?

To be honest, it's zsh's built-in vcs_info functionality.  It
automatically detects what branch I'm on, if I'm in the middle of an
operation like a rebase or cherry-pick, and whether changes are staged
or not, as well as providing pretty good completion.  It works with a
wide variety of Git versions and of course has the scope of features
you'd expect from zsh.


## Releases

* [Git 2.10](https://public-inbox.org/git/xmqqtwdxsp5q.fsf@gitster.mtv.corp.google.com/)
* [Git 2.10 overview from Peff@GitHub](https://github.com/blog/2242-git-2-10-has-been-released)
* [Git for Windows 2.10](https://github.com/git-for-windows/git/releases/tag/v2.10.0.windows.1)
* [Git for Windows 2.10 overview from Dscho@Microsoft](https://blogs.msdn.microsoft.com/visualstudioalm/2016/09/03/whats-new-in-git-for-windows-2-10/)
* [libgit2/rugged v0.25.0b8](https://github.com/libgit2/rugged/releases/tag/v0.25.0b8)
* [GitLab 8.11](https://about.gitlab.com/2016/08/22/gitlab-8-11-released/) through [8.11.5 ](https://about.gitlab.com/2016/09/07/gitlab-8-dot-11-dot-5-released/)
* GUI tool [GitKraken v1.6](https://blog.axosoft.com/2016/09/12/gitkraken-v1-6/)

## Other News

* GitLab elaborates on their new round of founding in the [GitLab Master Plan](https://about.gitlab.com/2016/09/13/gitlab-master-plan/)
* [Gmane has a new maintainer](http://lwn.net/Articles/699704/), which is good because we have a lot of old links pointing to Gmane in previous editions.
* Jon Loeliger [got enlisted](https://public-inbox.org/git/E1bhKNo-0005m2-5z@mylo.jdl.com/) to help run a [Miniconference on Git](https://www.linuxplumbersconf.org/2016/git-microconference-accepted-into-lpc-2016/) at Linux Plumber Conference

__Git tips and tricks__

* [Oh, shit, git!](http://ohshitgit.com/) by Katie Sylor-Miller
* [Git Hot Tips](http://wesbos.com/git-hot-tips/) by Wes Bos
* [Git diff tips and tricks](https://blog.twobucks.co/git-diff-tips-and-tricks/) by Hrvoje Šimić

__Light reading__

* [Git - Basic hygiene of working with repository](http://www.allinmobile.co/git-basic-hygiene-of-working-with-repository/) by Luke Konior

__Git tools and sites__

* [Git CI stats](https://larsxschneider.github.io/git-ci-stats/) - shows the Travis CI build charts for the Git project itself, including result, build time and test results for every single commit.
* [git-fiddle: Edit commit messages, authors and timestamps during git-rebase](https://github.com/felixSchl/git-fiddle)
* [SparkleShare - Self hosted, instant, secure file sync](https://www.sparkleshare.org/) based on Git
* [git-clean: A Command Line Tool written in Rust for cleaning up local and remote Git branches](https://github.com/mcasper/git-clean)
* [Fork - a fast and friendly git client for Mac](https://git-fork.com/)
* [GitHeat](http://www.mustafa-s.com/Githeat/) - Interactive heat-maps for your git repositories
* [Git Undo](http://megakemp.com/2016/08/25/git-undo/) is a neat little alias for getting stuff out of the reflog
* [literate-git: Render hierarchical git repositories into HTML](https://github.com/bennorth/literate-git/) - see a demo of it [here](http://www.redfrontdoor.org/20160813-literate-git-demo/index.html)

## Credits

This edition of Git Rev News was curated by Christian Couder &lt;<christian.couder@gmail.com>&gt; and
Thomas Ferris Nicolaisen &lt;<tfnico@gmail.com>&gt;, with help from Brian M. Carlson, Jakub Narębski,
Lars Schneider and Josh Triplett.
