---
title: Git Rev News Edition 12 (February 10th, 2016)
layout: default
date: 2016-02-10 13:30:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 12 (February 10th, 2016)

Welcome to the 12th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](https://git.github.io).

This edition covers what happened during the month of January 2016.

## Discussions

<!---
### General
-->

### Reviews

* [refs backend rebase on pu](http://thread.gmane.org/gmane.comp.version-control.git/284036/)

David Turner, who works for Twitter, recently sent new versions of his
work to add a database backend to store Git refs:

- [v1 "LMDB refs backend atop pre-vtable"](http://thread.gmane.org/gmane.comp.version-control.git/281925/)
- [v2 "refs backend reroll"](http://thread.gmane.org/gmane.comp.version-control.git/283739/)
- [v3 "refs backend rebase on pu"](http://thread.gmane.org/gmane.comp.version-control.git/284036/)
- [v4 "refs backend"](http://thread.gmane.org/gmane.comp.version-control.git/285604/)

This work was started a long time ago by Ronnie Sahlberg, working for
Google, and has already been reported about in
[Git Rev News edition 7](https://git.github.io/rev_news/2015/09/09/edition-7/).

These last patch series have again been reviewed or commented on by a
lot of experienced Git developers, like Junio Hamano, Michael
Haggerty, Duy Nguyen, Shawn Pearce, Jonathan Nieder, Eric Sunshine,
David Aguilar, Ronnie Sahlberg, Jeff King, Szeder Gábor, Thomas
Gummerer, Ramsay Jones, and also a bit by Howard Chu the LMDB author.

Some suggestions were about:

- [avoiding "extern" in C source](http://thread.gmane.org/gmane.comp.version-control.git/282020),
- [splitting functions](http://thread.gmane.org/gmane.comp.version-control.git/282924),
- [config options](http://thread.gmane.org/gmane.comp.version-control.git/281925),
- [indenting using tabs instead of spaces](http://thread.gmane.org/gmane.comp.version-control.git/281925),
- [option naming](http://thread.gmane.org/gmane.comp.version-control.git/282934),
- [using argv_array_* functions](http://thread.gmane.org/gmane.comp.version-control.git/282952),
- [using pointers to functions](http://thread.gmane.org/gmane.comp.version-control.git/282923),
- [typedef and pointers](http://thread.gmane.org/gmane.comp.version-control.git/282699),
- [naming call back functions](http://thread.gmane.org/gmane.comp.version-control.git/283936),
- [avoiding strcpy()](http://thread.gmane.org/gmane.comp.version-control.git/284091),
- [strings and memory leaks](http://thread.gmane.org/gmane.comp.version-control.git/284170).

So the interest in this work is still big and makes it likely that it
will bear fruits hopefully soon.

### Support

* [clones over rsync broken?](http://thread.gmane.org/gmane.comp.version-control.git/285099/)

Eric Wong, a long time git developer and the original git-svn author,
reported that he couldn't use the rsync protocol anymore to clone:

> I have not used rsync remotes in ages, but I was working on the
> patch for -4/-6 support and decided to test it against rsync.kernel.org
> 
> Cloning git.git takes forever and failed with:
> 
> $ git clone rsync://rsync.kernel.org/pub/scm/git/git.git
> Checking connectivity... fatal: bad object ecdc6d8612df80e871ed34bb6c3b01b20b0b82e6
> fatal: remote did not send all necessary objects

Jeff King, alias Peff, replied that the "rsync transport blindly pulls
all of the data over, with no idea that it doesn't need most of it",
and as there are "over 95,000 unreachable loose objects consuming a
gigabyte" in the cloned repository. This explains why Eric's clone
took forever.

But it also didn't work for Eric with smaller repositories and with
quite old versions of Git like 1.7.10.4. To that Peff replied that in
the rsync code "we blindly concatenate the list of loose refs and
packed refs" which has never been the right thing to do. And this
explains why the clones always fail with rsync. Peff found that this
has been broken since 2007, which is why it doesn't work even with old
git versions.

Peff also investigated different ways to fix it but concluded:

> ...git-over-rsync is just an awful protocol. Nobody should be
> using it. Having looked at it in more detail, I'm more in favor than
> ever of removing it.

and then sent a patch to "drop support for git-over-rsync". This
patch, on top of explaning the above, contains:

> We never made an official deprecation notice in the release
> notes for git's rsync protocol, but the tutorial has marked
> it as such since 914328a (Update tutorial., 2005-08-30).
> And on the mailing list as far back as Oct 2005, we can find
> Junio mentioning it as having "been deprecated for quite
> some time."... So it was old news then; cogito had
> deprecated the transport in July of 2005... (though it did
> come back briefly when Linus broke git-http-pull!).
>
> Of course some people professed their love of rsync through
> 2006, but Linus clarified in his usual gentle manner...:
> 
> > > Thanks!  This is why I still use rsync, even though
> > > everybody and their mother tells me "Linus says rsync is
> > > deprecated."
> > 
> > No. You're using rsync because you're actively doing
> > something _wrong_.
> 
> The deprecation sentiment was reinforced in 2008, with a
> mention that cloning via rsync is broken (with no fix)...
> 
> Even the commit porting rsync over to C from shell (cd547b4)
> lists it as deprecated! So between the 10 years of informal
> warnings, and the fact that it has been severely broken
> since 2007, it's probably safe to simply remove it without
> further deprecation warnings.

## Developer Spotlight: Thomas Gummerer

* Who are you, and what do you do?

I'm an occasional contributor to Git. Originally I got involved with
the Git community during the Google Summer of Code in 2012. I recently
finished my masters degree, and will be starting a new job in about a
month.

* What would you name your most important contribution to Git?

I haven't really made any big contributions to Git, but rather the
occasional bug fix and some small features. Many of my contributions
are around the index, as that's the first thing I worked on in Git for
my Google Summer of Code project in 2012.

* What are you doing on the Git project these days, and why?

Most recently I helped reviewing the LMDB backend patch series by
David Turner. As I didn't know much about the refs code before reading
through the series I thought the introduction of a new backend would
be a good way to learn more about that part of Git. Other recent work
includes a patch series to add an option to show symrefs in `git
ls-remote` and another patch series allowing `git grep` to fall back
to `git grep --no-index`, if it is executed outside of a git
repository. In addition to improving a project I use daily, I get to
learn from more experienced developers with each patch series I'm
sending.

* If you could get a team of expert developers to work full time on
  something in Git for a full year, what would it be?

One thing I particularly like about Git is how almost every operation
can be reversed in some way, if the user knows how to. Recovering from
such operations can however often be difficult, especially for someone
who does not know the ins and outs of Git. I think it would be great
to have some kind of `git undo` command, that can undo the last, or
last few operations in the repository.

* If you could remove something from Git without worrying about
  backwards compatibility, what would it be?

I don't think I would remove any feature in particular, but it would
be nice to improve the consistency in the user interface. These
inconsistencies make using Git harder and often confusing for new
users.

* What is your favourite Git-related tool/library, outside of Git itself?

From a contributor perspective I find
[Thomas Rast's tbdiff](https://github.com/trast/tbdiff) very useful.
I use it mostly to compare an older version of a patch series to a new
version I'm about to send and to see if all the review comments are
addressed.


## Releases

* On January 4th, 2016, [Git 2.7.0 was released](http://article.gmane.org/gmane.linux.kernel/2118402), and a day later, [Git for Windows followed suite](http://article.gmane.org/gmane.comp.version-control.git/283383).
* On February 2nd, 2016, Git for Windows published [version 2.7.0(2)](http://article.gmane.org/gmane.comp.version-control.git/285282) primarily to address [complaints by web browsers about "unsigned" installers](https://github.com/git-for-windows/git/issues/592).
* On February 6th, 2016, [Git 2.7.1 was released](http://article.gmane.org/gmane.comp.version-control.git/285657), followed by [Git for Windows 2.7.1](http://article.gmane.org/gmane.comp.version-control.git/285699) on the same day.
* [Release v0.24.0b12 · libgit2/rugged](https://github.com/libgit2/rugged/releases/tag/v0.24.0b12)
* [Release v0.11.0 · nodegit/nodegit](https://github.com/nodegit/nodegit/releases/tag/v0.11.0)
* [JGit/EGit Release 4.2](http://dev.eclipse.org/mhonarc/lists/jgit-dev/msg03087.html)
* [GitLab's 50th Release: 8.4](https://about.gitlab.com/2016/01/22/gitlab-8-4-released/)

## Other News

__Various__

* [Git Merge 2016 on April 5th 2016](http://git-merge.com/) and [Git Developer Summit on April 4th 2016](http://thread.gmane.org/gmane.comp.version-control.git/285270) in New York City USA have been officially announced.
* [dear-github: An open letter to GitHub from the maintainers of open source projects](https://github.com/dear-github/dear-github)
* [The history behind the decision to move Python to GitHub - Brett Cannon](http://www.snarky.ca/the-history-behind-the-decision-to-move-python-to-github)
* [Mercurial's author, Matt Mackall, is moving on after 10 years of leading the project](https://www.mercurial-scm.org/wiki/mpm/transition)
* [unix-history-repo: Continuous Unix commit history from 1972 until today](https://github.com/dspinellis/unix-history-repo)

__Light reading__

* [Deployment strategy with git - Marco Bunge](http://www.marco-bunge.com/2016/01/26/deployment-strategy-with-git/)
* [a discussion on git integrity - from the binary-transparency Google Group](https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0)
* [Learn Enough Git to Be Dangerous - Michael Hartl](http://www.learnenough.com/git-tutorial)

__Git tools and sites__

* [Gitcolony: The next generation of pull requests](https://www.gitcolony.com/?ref=cmang)
* [ben174/git-draw: Allows you to draw in your github heatmap](https://github.com/ben174/git-draw)
* [primiano/git-gdrive: git-gdrive: format-patch / am over Google Drive](https://github.com/primiano/git-gdrive)
* [awesome-git-addons: A curated list of addons that extends git cli](https://github.com/stevemao/awesome-git-addons)

## Credits

This edition of Git Rev News was curated by Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Thomas Ferris Nicolaisen &lt;<tfnico@gmail.com>&gt; and Nicola Paolucci &lt;<npaolucci@atlassian.com>&gt;,
with help from Thomas Gummerer, Johannes Schindelin and Jeff King.
